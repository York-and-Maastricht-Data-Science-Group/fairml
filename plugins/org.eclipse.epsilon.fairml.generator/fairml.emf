/***
A metamodel for FairML -- A model-based approach
for Fair Machine Learning.
*/
@namespace(uri="fairml", prefix="")
package fairml;

enum Classification {
	DecisionTreeClassifier = 1;
	LogisticRegression = 2;
	KNeighborsClassifier = 3;
	GaussianNB = 4;
	LinearSVC = 5;
}

/***
 Root container
*/
class FairML {
	attr String name;
	attr String description;
	val Dataset[*] datasets;
	val BiasChecking[*] biasChecks;
	val BiasMitigation[*] biasMitigations;
}

/***
 Class for representing datasets
*/
class Dataset {
	attr String name;
	attr String path;
	attr String[*] protectedAttributes;
}

/***
 Abtract class for representing executable operations.
 Basically it mimics the Python classes used for
 training, bias detection and mitigation.
 It has package name, class name, 
 parameters as well as the class' 
 functions/methods and their parameters
*/
abstract class Operation {
	attr String packageName;
	attr String name;
	attr String[*] parameters;
	val Function[*] functions;	
}

/***
 Class for representing functions/methods 
 of a class and their parameters	
*/
class Function {
	attr String name;
	attr String[*] parameters;	
}

/***
  The class represents the training algorithm
*/
class TrainingMethod extends Operation {
			
}

/***
  The class represents the bias mitigation method
*/
class MitigationMethod extends Operation {

}

/***
  The class represents the bias checking method
*/
class CheckingMethod extends Operation {
	val ExplainerMethod[*] explainers;			
}

class ExplainerMethod extends Operation {
			
}

class BiasChecking {
	attr String name;
	ref Dataset dataset;

	attr int[0..2] trainValidationTestSplit;
	
	attr String protectedAttribute;
	attr int priviledgedGroup;
	attr int unpriviledgedGroup;
	
	attr String predictedAttribute;
	attr String[*] droppedAttributes;
	
	val CheckingMethod[*] checkingMethods; 
	
	val TrainingMethod[*] trainingMethods;
}

class BiasMitigation {
	attr String name;
	ref BiasChecking biasChecking;		 
	
	val MitigationMethod mitigationMethod;		
}



