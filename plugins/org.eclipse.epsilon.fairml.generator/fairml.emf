/***
A metamodel for FairML -- A model-based approach
for Fair Machine Learning.
*/
@namespace(uri="fairml", prefix="")
package fairml;

enum Classification {
	DecisionTreeClassifier;
	LogisticRegression;
//	KNeighborsClassifier;
//	GaussianNB;
//	LinearSVC;
}

enum Mitigation {
    Reweighing;
    LFR;
    DisparateImpactRemover;
}

/***
 Root container
*/
class FairML {
	attr String name;
	attr String description;
	val Dataset[*] datasets;
	val BiasMitigation[*] biasMitigations;
}

/***
 Abtract class for representing executable operations.
 Basically it mimics the Python classes used for
 training, bias detection and mitigation.
 It has package name, class name, 
 parameters as well as the class' 
 functions/methods and their parameters
*/
abstract class Operation {
	attr String packageName;
	attr String name;
	attr String[*] parameters;
	val Function[*] functions;	
}

/***
 Class for representing functions/methods 
 of a function and their parameters	
*/
class Function {
	attr String name;
    attr String[*] parameters;
}

/***
  The class represents the training algorithm
*/
class TrainingMethod extends Operation {
    attr Classification type;
}

/***
  The class represents the bias mitigation method
*/
class MitigationMethod extends Operation {
    attr Mitigation type;
}

/***
  The class represents the bias checking method
*/
class CheckingMethod extends Operation {
			
}

/***
 Class for representing datasets
*/
class Dataset {
    attr String name;
    attr String datasetPath;
    
    // if the dataset path above is empty then 
    // the train and test datasets are defined by these paths
    attr String trainDatasetPath;  
    attr String testDatasetPath;
    
    attr int priviledgedGroup;
    attr int unpriviledgedGroup;
    
    attr String predictedAttribute;
    !unique attr int[*] favorableClasses;
    attr String[*] protectedAttributes;
    !unique attr int[*] privilegedClasses;
    !unique attr int[*] unprivilegedClasses;
    attr String[*] instanceWeights;
    attr String[*] categoricalFeatures;    
    attr String[*] droppedAttributes;
    attr String[*] notAvailableValues;
    attr String defaultMappings;
    
    // Fraction of dataset for training -- the rest is for testing.
    // Maximum value is 1.0.
    !unique attr int[0..2] trainTestSplit;
}

class BiasMitigation {
	attr String name;
	ref Dataset[*] datasets;
	val CheckingMethod[*] checkingMethods;		 
	val MitigationMethod[*] mitigationMethods;	
	val TrainingMethod[*] trainingMethods;		
}