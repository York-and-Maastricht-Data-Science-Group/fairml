/***
A metamodel for FairML -- A model-based approach
for Fair Machine Learning.

@Project: York-Maastricht Partnership Project
@Info: https://www.york.ac.uk/maastricht/
@Author: Alfa Yohannis

*/
@namespace(uri="fairml", prefix="")
package fairml;

/***
  Types of PopulationTarget to automatically choose bias metrics 
  in Bias Mitigation.
***/
/*enum PopulationTarget {
    Group;
    Individual;
    SingleMetricForBoth;
}*/

/***
  Types of WorldViews to automatically choose bias metrics 
  in Bias Mitigation
***/
/*enum FairnessWorldView {
    Equal;
    Proportional;
    Both;
}*/

/* Classifiers/Training Algorithms */
/*enum Classification {
    DecisionTreeClassifier;
    LogisticRegression;
//  KNeighborsClassifier;
//  GaussianNB;
//  LinearSVC;
}*/

/* Bias Mitigation Algorithms */
/*enum Mitigation {   
    // Preprocessing
    Reweighing;
    LFR;
    DisparateImpactRemover;
    OptimisedPreprocessing;
    
    // Inprocessing
    MetaFairClassifier;
    AdversarialDebiasing;
    PrejudiceRemover;
    
    // Postprocessing
    EqualisingOddsPostprocessing;
    CalibratedEqOddsPostprocessing;
    RejectOptionClassification;
}*/

/***
 Root container
*/

class FairML {
    attr String name;
    attr String description;
    val Dataset[*] datasets;
    val BiasMitigation[*] biasMitigations;
}

abstract class Operation {
    attr String packageName;
    attr String name;
    attr String[*] parameters;
    val Function[*] functions;
}

class Function {
    attr String name;
    attr String[*] parameters;
}


/***
  The class represents the training algorithm
*/
class TrainingMethod extends Operation  {
    attr String algorithm;
}

/***
  The class represents the bias mitigation method
*/
class MitigationMethod extends Operation {
    attr String algorithm;
}

/***
  The class represents the bias checking method
*/
class BiasMetric extends Operation {
     attr String className = "ClassificationMetric";
}

/***
 Class for representing datasets that will be bias mitigated
*/
class Dataset {
    attr String name;
    attr String datasetPath;
    
    // if the dataset path above is empty then 
    // the train and test datasets are defined by these paths
    attr String trainDatasetPath;  
    attr String testDatasetPath;
    
    attr int priviledgedGroup;
    attr int unpriviledgedGroup;
    
    attr String predictedAttribute;
    !unique attr int[*] favorableClasses;
    attr String[*] protectedAttributes;
    !unique attr int[*] privilegedClasses;
    !unique attr int[*] unprivilegedClasses;
    attr String[*] instanceWeights;
    attr String[*] categoricalFeatures;    
    attr String[*] droppedAttributes;
    attr String[*] notAvailableValues;
    attr String defaultMappings;
    
    // Fraction of dataset for training -- the rest is for testing.
    // Maximum value is 1.0.
    !unique attr int[0..2] trainTestSplit;
}

/***
    The class to define bias mitigation process.
***/
class BiasMitigation {
    attr String name;
    
    /* flags to automatically select bias metrics */
    attr boolean groupFairness = true;
    attr boolean individualFairness = false;
    attr boolean groupIndividualSingleMetric = false;
    
    attr boolean equalFairness = false;
    attr boolean proportionalFairness = false; 
    
    attr boolean checkFalsePositive = false;
    attr boolean checkFalseNegative = false;
    attr boolean checkErrorRate = false;
    attr boolean checkEqualBenefit = false;
    
    /* flags to automatically select mitigation algorithms */
  
    // preprocessing
    attr boolean prepreprocessingMitigation = false;
    attr boolean modifiableWeight = true;
    attr boolean allowLatentSpace = false;
    
    // inprocessing
    attr boolean inpreprocessingMitigation = false;
    attr boolean allowRegularisation = false;
    
    // postprocessing
    attr boolean postpreprocessingMitigation = false;
    attr boolean allowRandomisation = false;
    
    // define the datasets to mitigate their biases
    ref Dataset[*] datasets;
    
    // define the metrics to measure biases
    val BiasMetric[*] biasMetrics;
    
    // define the mitigation algorithms to mitigate biases       
    val MitigationMethod[*] mitigationMethods;  
    
    // define the classifiers to train models
    val TrainingMethod[*] trainingMethods;      
}
