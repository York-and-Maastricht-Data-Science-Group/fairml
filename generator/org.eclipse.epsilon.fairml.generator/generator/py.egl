[% import 'Util.eol'; %]
[%
for (biasMitigation in fairml.biasMitigations) {
	/* Setting up flags to automatically select bias metrics and mitigation algorithms. */
	// automatically select metrics
	if (biasMitigation.groupFairness) {
	    if (biasMitigation.equalFairness){
	       var metric = new BiasMetric;
	       metric.name = "disparate_impact";   
	       biasMitigation.biasMetrics.add(metric); 
	       
	       metric = new BiasMetric;
	       metric.name = "statistical_parity_difference";   
	       biasMitigation.biasMetrics.add(metric);
	    }    
	    if (biasMitigation.proportionalFairness){
	       var metric = new BiasMetric;
	       metric.name = "average_odds_difference";   
	       biasMitigation.biasMetrics.add(metric); 
	       
	       metric = new BiasMetric;
	       metric.name = "average_abs_odds_difference";   
	       biasMitigation.biasMetrics.add(metric);
	    }    
	    if (biasMitigation.checkFalsePositive){
	       var metric = new BiasMetric;
	       metric.name = "false_positive_rate_ratio";   
	       biasMitigation.biasMetrics.add(metric); 
	       
	       metric = new BiasMetric;
	       metric.name = "false_discovery_rate_ratio";   
	       biasMitigation.biasMetrics.add(metric);
	    }
	    if (biasMitigation.checkFalseNegative){
	       var metric = new BiasMetric;
	       metric.name = "false_negative_rate_ratio";   
	       biasMitigation.biasMetrics.add(metric); 
	       
	       metric = new BiasMetric;
	       metric.name = "false_omission_rate_ratio";   
	       biasMitigation.biasMetrics.add(metric);
	    }
	    if (biasMitigation.checkErrorRate){
	       var metric = new BiasMetric;
	       metric.name = "error_rate";   
	       biasMitigation.biasMetrics.add(metric); 
	    }
	    if (biasMitigation.checkEqualBenefit){
	       var metric = new BiasMetric;
	       metric.name = "equal_opportunity_difference";   
	       biasMitigation.biasMetrics.add(metric); 
	    }
	} 
	if (biasMitigation.individualFairness) {
	   var metric = new BiasMetric;
	   metric.className = "SampleDistortionMetric";
	   metric.name = "euclidean_distance";   
	   biasMitigation.biasMetrics.add(metric);  
	
	   metric = new BiasMetric;
	   metric.className = "SampleDistortionMetric";
	   metric.name = "manhattan_distance";   
	   biasMitigation.biasMetrics.add(metric);
	   
	   metric = new BiasMetric;
	   metric.className = "SampleDistortionMetric";
	   metric.name = "mahalanobis_distance";   
	   biasMitigation.biasMetrics.add(metric);
	} 
	if (biasMitigation.groupIndividualSingleMetric){
	   var metric = new BiasMetric;
	   metric.name = "generalized_entropy_index";   
	   biasMitigation.biasMetrics.add(metric);  
	
	   metric = new BiasMetric;
	   metric.name = "theil_index";   
	   biasMitigation.biasMetrics.add(metric);
	}    
	
	// automatically select bias mitigation algorithms
	if (biasMitigation.prepreprocessingMitigation){
        
//        var method = new MitigationMethod;
//        method.algorithm = "OptimizedPreproc";   
//        biasMitigation.mitigationMethods.add(method);
//           
//        method = new MitigationMethod;
//        method.algorithm = "DisparateImpactRemover";   
//        biasMitigation.mitigationMethods.add(method);

	    if (biasMitigation.modifiableWeight){
//	       var method = new MitigationMethod;
//	       method.algorithm = "Reweighing";   
//	       biasMitigation.mitigationMethods.add(method);
	    }
	    if (biasMitigation.allowLatentSpace){
	    }   
	}
	
	if (biasMitigation.inpreprocessingMitigation){
	    if (biasMitigation.allowRegularisation){
	    }    
	    if (biasMitigation.postpreprocessingMitigation){
	    }
	    if (biasMitigation.allowRandomisation){
	    }       
	}
}
%]
[%var number1 = 0; %]
[%var number2 = 0; %]
[%var number3 = 0; %]
[%var number4 = 0; %]
[%var number5 = 0; %]
# # FairML: [%=fairml.name%]
# [%=fairml.description.replace("\n","\\\n# ")%]

# # Contents

[% for (biasMitigation in fairml.biasMitigations) { %]
# [FairML: [%=fairml.name%]](#FairML:-[%=fairml.name.replace(" ", "-")%])
# [Contents](#Contents)
# * [[%=number1++%]. Bias Mitigation: [%=biasMitigation.name%]](#[%=number1%].-Bias-Mitigation:-[%=biasMitigation.name.replace(" ", "-")%])
[%number2 = 0; %]
  [% for (dataset in biasMitigation.datasets) { %]
#   * [[%=number1%].[%=number2++%]. Dataset [%=dataset.name%]](#[%=number1%].[%=number2%].-Dataset-[%=dataset.name.replace(" ", "-")%])
#       * [[%=number1%].[%=number2%].[%=number3++%]. Original Dataset](#[%=number1%].[%=number2%].[%=number3%].-Original-Dataset)
    [% for (trainingMethod in biasMitigation.trainingMethods) { %]
     [%number5 = 0;%]
#           * [[%=number1%].[%=number2%].[%=number3%].[%=number4++%]. Classifier [%=trainingMethod.algorithm%], Parameters: [%=trainingMethod.parameters.listToLineWithoutQuote()%]](#[%=number1%].[%=number2%].[%=number3%].[%=number4%].-Original-Dataset:-Classifier-[%=trainingMethod.algorithm%],-Parameters:-[%=trainingMethod.parameters.listToLineWithoutQuote().replace(" ", "-")%])
#               * [[%=number1%].[%=number2%].[%=number3%].[%=number4%].[%=number5++%]. Prediction Accuracy](#[%=number1%].[%=number2%].[%=number3%].[%=number4%].[%=number5%].-Original-Dataset:-Check-the-Accuracy-of-the-Prediction)
#               * [[%=number1%].[%=number2%].[%=number3%].[%=number4%].[%=number5++%]. Bias Metrics](#[%=number1%].[%=number2%].[%=number3%].[%=number4%].[%=number5%].-Original-Dataset:-Bias-Metrics)
    [% } %]
    [% for (mitigationMethod in biasMitigation.mitigationMethods) { %]
#       * [[%=number1%].[%=number2%].[%=number3++%]. Mitigate Bias using [%=mitigationMethod.algorithm%]](#[%=number1%].[%=number2%].[%=number3%].-Mitigate-Bias-using-[%=mitigationMethod.algorithm%])  
      [% number4 = 0; number5 = 0; %]
      [% for (trainingMethod in biasMitigation.trainingMethods) { %]
        [%number5 = 0;%]
#           * [[%=number1%].[%=number2%].[%=number3%].[%=number4++%]. Classifier [%=trainingMethod.algorithm%], Parameters: [%=trainingMethod.parameters.listToLineWithoutQuote()%]](#[%=number1%].[%=number2%].[%=number3%].[%=number4%].-After-mitigation-Dataset:-Classifier-[%=trainingMethod.algorithm%],-Parameters:-[%=trainingMethod.parameters.listToLineWithoutQuote().replace(" ", "-")%])
#               * [[%=number1%].[%=number2%].[%=number3%].[%=number4%].[%=number5++%]. Prediction Accuracy](#[%=number1%].[%=number2%].[%=number3%].[%=number4%].[%=number5%].-After-mitigation:-Check-the-Accuracy-of-the-Prediction)
#               * [[%=number1%].[%=number2%].[%=number3%].[%=number4%].[%=number5++%]. Bias Metrics](#[%=number1%].[%=number2%].[%=number3%].[%=number4%].[%=number5%].-After-mitigation:-Bias-Metrics)
      [% } %]
    [% } %]
#   * [[%=number1%].[%=number2++%]. Summary](#[%=number1%].[%=number2%].-Summary)
  [% } %]
[% } %]
[%number1 = 0; %]
[%number2 = 0; %]
[%number3 = 0; %]
[%number4 = 0; %]
[%number5 = 0; %]

# Load dependencies.
from fairml import *
import numpy as np
import pandas as pd
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
# from sklearn.svm import LinearSVC
# from sklearn.neighbors import KNeighborsClassifier
# from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
from aif360.metrics import BinaryLabelDatasetMetric
from aif360.metrics import ClassificationMetric
from aif360.algorithms.preprocessing import *
from aif360.algorithms.inprocessing import *
from aif360.algorithms.postprocessing import *
from aif360.explainers import MetricTextExplainer
from aif360.datasets import StandardDataset
import matplotlib.pyplot as plt
from collections import defaultdict
from IPython.display import Markdown, display
from IPython import get_ipython

fairml = FairML()

print("========================")
print("FairML: [%=fairml.name%]")
print("========================")
print("Description:")
print("[%=fairml.description.replace("\n","\"+\\\n\"")%]")

[% for (biasMitigation in fairml.biasMitigations) { %]

# ## [[%=number1++%].](#Contents) Bias Mitigation: [%=biasMitigation.name%]
bm = fairml.add_bias_mitigation(BiasMitigation())

print("")
print("========================")
print("Bias Mitigation: [%=biasMitigation.name%]")
print("------------------------")

[% for (dataset in biasMitigation.datasets) { %]

# ### [[%=number1%].[%=number2++%].](#Contents) Dataset [%=dataset.name%]
print("")
print("Dataset: [%=dataset.name%]")
print("-------------")

# #### [[%=number1%].[%=number2%].[%=number3++%].](#Contents) Original Dataset
bm.predicted_attribute = '[%=dataset.predictedAttribute%]'
bm.protected_attributes = [[%=dataset.protectedAttributes.listToLine()%]]
bm.favorable_class = 1
bm.privileged_class = 1
bm.unprivileged_class = 0
bm.dropped_attributes = []
bm.na_values = []
bm.training_size = [%=dataset.trainTestSplit[0]%]    
bm.test_size = [%=dataset.trainTestSplit[1]%] 
bm.total_size = (bm.training_size + bm.test_size) * 1.0
bm.categorical_features = [[%=dataset.categoricalFeatures.listToLine()%]]
[% if (dataset.defaultMappings == null) {%]
bm.default_mappings = None
[% } %]

# Load dataset.
bm.resource = "[%=dataset.datasetPath%]"
bm.data = pd.read_csv(bm.resource, header=0)
bm.dataset_original = StandardDataset(df=bm.data, label_name=bm.predicted_attribute, 
                favorable_classes=[bm.favorable_class],
                protected_attribute_names=bm.protected_attributes,
                privileged_classes=[[bm.privileged_class]],
                instance_weights_name=None,
                categorical_features=bm.categorical_features,
                features_to_keep=[],
                features_to_drop=bm.dropped_attributes,
                na_values=bm.na_values, 
                custom_preprocessing=None,
                metadata=bm.default_mappings)
bm.dataset_original_train, dataset_original_test = bm.dataset_original.split([bm.training_size/bm.total_size], shuffle=True)
bm.privileged_groups = [{bm.protected_attributes[0] : bm.privileged_class}]
bm.unprivileged_groups = [{bm.protected_attributes[0] : bm.unprivileged_class}]

    [% for (trainingMethod in biasMitigation.trainingMethods) { %]

# ##### [[%=number1%].[%=number2%].[%=number3%].[%=number4++%].](#Contents) Original Dataset: Classifier [%=trainingMethod.algorithm%], Parameters: [%=trainingMethod.parameters.listToLineWithoutQuote()%]
[%number5 = 0;%]
print("")
print("Original Dataset: Classifier [%=trainingMethod.algorithm%], Parameters: [%=trainingMethod.parameters.listToLineWithoutQuote()%]")
print("-------------")

# Train the model from the original train data
classifier = [%=trainingMethod.algorithm%]([%=trainingMethod.parameters.listToLineWithoutQuote()%])
model_original_train = bm.train(bm.dataset_original_train,  classifier)

bm.drawModel(classifier, bm.dataset_original_train, 'graphics/Original-[%=trainingMethod.algorithm%]_[%=trainingMethod.parameters.listToLineWithoutQuote().replace("'","").replace(",", "-").replace(" ", "")%].png')

# ###### [[%=number1%].[%=number2%].[%=number3%].[%=number4%].[%=number5++%].](#Contents) Original Dataset: Check the Accuracy of the Prediction

print_message("Check the accuracy of the prediction")
original_accuracy = bm.check_accuracy(model_original_train, dataset_original_test)
print_message("Original Accuracy: " + str(original_accuracy))

# ###### [[%=number1%].[%=number2%].[%=number3%].[%=number4%].[%=number5++%].](#Contents) Original Dataset: Bias Metrics[% // start of metrics %]

print("Original Bias Metrics")
dataset_original_train_pred = bm.create_predicted_dataset(bm.dataset_original_train, model_original_train)

bm.init_new_result("Original", "[%=dataset.name%]", "[%=trainingMethod.algorithm%]", original_accuracy)

[%    for (biasMetric in biasMitigation.biasMetrics) { %]
[%      if (biasMetric.className == "ClassificationMetric") { %]
bm.measure_bias("[%=biasMetric.name%]", bm.dataset_original_train, dataset_original_train_pred, bm.privileged_groups, bm.unprivileged_groups)
[%      } %]
[%    } %][% // end of original metrics %]
[%  } %][% // end of original training %]

    [% for (mitigationMethod in biasMitigation.mitigationMethods) { %]

# #### [[%=number1%].[%=number2%].[%=number3++%].](#Contents) Mitigate Bias using [%=mitigationMethod.algorithm%]  
[% number4 = 0; number5 = 0; %]
print("")
print("Mitigate Bias using [%=mitigationMethod.algorithm%]")
print("-------------")
[% if (mitigationMethod.algorithm == "Reweighing") { %]
mitigation_method = [%=mitigationMethod.algorithm%](unprivileged_groups=bm.unprivileged_groups,
               privileged_groups=bm.privileged_groups)
[% } else if (mitigationMethod.algorithm == "LFR") { %]
mitigation_method = [%=mitigationMethod.algorithm%](unprivileged_groups=bm.unprivileged_groups,
               privileged_groups=bm.privileged_groups)
[% } else { %]
mitigation_method = [%=mitigationMethod.algorithm%]([%=mitigationMethod.parameters.listToLineWithoutQuote()%])
[% } %]

dataset_mitigated_train = mitigation_method.fit_transform(bm.dataset_original_train)
dataset_mitigated_test = mitigation_method.fit_transform(dataset_original_test)

    [% for (trainingMethod in biasMitigation.trainingMethods) { %]

# ##### [[%=number1%].[%=number2%].[%=number3%].[%=number4++%].](#Contents) After-mitigation Dataset: Classifier [%=trainingMethod.algorithm%], Parameters: [%=trainingMethod.parameters.listToLineWithoutQuote()%]
[% number5=0; %]
print("")
print("After-mitigation Training: [%=trainingMethod.algorithm%], Parameters: [%=trainingMethod.parameters.listToLineWithoutQuote()%]")
print("-------------")

# Train the model from the after-mitigation train data
classifier = [%=trainingMethod.algorithm%]([%=trainingMethod.parameters.listToLineWithoutQuote()%])
model_mitigated_train = bm.train(dataset_mitigated_train,  classifier)

bm.drawModel(classifier, dataset_mitigated_train, 'graphics/Mitigated-[%=trainingMethod.algorithm%]_[%=trainingMethod.parameters.listToLineWithoutQuote().replace("'","").replace(",", "-").replace(" ", "")%].png')

# ###### [[%=number1%].[%=number2%].[%=number3%].[%=number4%].[%=number5++%].](#Contents) After-mitigation: Check the Accuracy of the Prediction

print_message("Check the accuracy of the prediction")
after_mitigation_accuracy = bm.check_accuracy(model_mitigated_train, dataset_mitigated_test)
print_message("After Mitigation Accuracy: " + str(after_mitigation_accuracy))

# ###### [[%=number1%].[%=number2%].[%=number3%].[%=number4%].[%=number5++%].](#Contents) After-mitigation: Bias Metrics

print("After-mitigation Metrics")
dataset_mitigated_train_pred = bm.create_predicted_dataset(dataset_mitigated_train, model_mitigated_train)

bm.init_new_result("[%=mitigationMethod.algorithm%]", "[%=dataset.name%]", "[%=trainingMethod.algorithm%]", after_mitigation_accuracy)

    [% for (biasMetric in biasMitigation.biasMetrics) { %]
        [% if (biasMetric.className == "ClassificationMetric" ) { %]
bm.measure_bias("[%=biasMetric.name%]", dataset_mitigated_train, dataset_mitigated_train_pred, bm.privileged_groups, bm.unprivileged_groups)
        [% } else { %]
        [% } %]
      [% } %]
    [% } %]
  [% } %]

# ### [[%=number1%].[%=number2++%].](#Contents) Summary

table = bm.display_summary()
table
[%   } %]
[% } %]
[% //fairml.p2j(); %]