import 'fairml.eol';

pre {
    var genPath = ".";      
    var preprocessings = Sequence{"DisparateImpactRemover", "LFR", "OptimPreproc", 
        "Reweighing"};
    var inprocessings = Sequence{"AdversarialDebiasing", "ARTClassifier", "PrejudiceRemover",
    "MetaFairClassifier", "GerryFairClassifier", "ExponentiatedGradientReduction",
    "GridSearchReduction"};
    var postprocessings = Sequence{"CalibratedEqOddsPostprocessing", "EqOddsPostprocessing",
        "RejectOptionClassification"};  
}

/***
 * Generate Java File (*.java) that converts *.py file to *.ipynb file. 
***/
rule IpynbGenFile transform fairml: FairML {
    parameters : Map {     
        "fairml" = fairml       
    }
    template: "ipynb.egl"
    target: genPath + "/" + fairml.name.replace(" ", "") + "IpynbGen.java"
}

/***
 * Generate Java File (*.java) that converts *.py file to *.X.ipynb file. 
***/
//rule XIpynbGenFile transform fairml: FairML {
//    parameters : Map {     
//        "fairml" = fairml,
//        "preprocessings" = preprocessings,
//        "inprocessings" = inprocessings,        
//        "postprocessings" = postprocessings       
//    }
//    template: "ipynb.X.egl"
//    target: genPath + "/" + fairml.name.replace(" ", "_").toLowerCase() + ".X.ipynb"
//}

/***
 * Generate Python File (*.py)
***/
rule PythonFile transform fairml : FairML {
    parameters : Map {     
        "fairml" = fairml,
        "preprocessings" = preprocessings,
        "inprocessings" = inprocessings,        
        "postprocessings" = postprocessings
    }
    template: "py.egl"
    target: genPath + "/" + fairml.name.replace(" ", "_").toLowerCase() + ".py"
}

/***
 * Generate FairML's Python module
***/
rule FairMLFile transform fairml : FairML {
    parameters : Map {     
        "fairml" = fairml
    }
    template: "fairml.py"
    target: genPath + "/" + "fairml.py"
}
