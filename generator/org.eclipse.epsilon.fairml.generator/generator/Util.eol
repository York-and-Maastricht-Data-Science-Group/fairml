operation Collection listToLine(): String {
	return self
		.collect(item | "'" + item + "'")
		.concat(", ");
}

operation Collection listToLineWithBrackets(): String {
    return self
        .collect(item | "['" + item + "']")
        .concat(", ");
}

operation Collection listToLineWithoutQuotesWithBrackets(): String {
    return self
        .collect(item | "[" + item + "]")
        .concat(", ");
}

operation Collection listToLineWithoutQuote(): String {
	return self
		.collect(item | item )
		.concat(", ");
}

operation FairML inc(value: Integer): Integer {
	value := value + 1;
	return value;		
}

//operation FairML p2j(): String {
//    var pb = new Native("java.lang.ProcessBuilder")
//        (Sequence{"cmd ","/c", "start", "cmd.exe"});
////        (Sequence{"cmd ","/c", "start", "/b", "cmd.exe", "/K", "\"p2j -o decision_tree.py\""});
////        (Sequence{"cmd /c start /b cmd.exe /K \"p2j -o decision_tree.py\""});
//    pb.start();
//    
//    var System = new Native("org.eclipse.epsilon.examples.fairml.decisiontree.DecisionTreeGenIpynb");
//    System.gen();
//    
//    var Runtime = new Native("java.lang.Runtime");
//    Runtime.getRuntime().exec(Sequence{"cmd ","/c", "start", "cmd.exe"});
//  
//    var frame = new Native("javax.swing.JFrame");
//    frame.title = "Opened with EOL";
//    frame.setBounds(100,100,300,200);
//    frame.visible = true;
//}

operation FairML generateId(): String {
    var chars = Sequence{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d" ,"e"};
    var text = "";
    for (i in Sequence{1..8}){
        text = text + chars.random();
    } 
    return text;       
}
