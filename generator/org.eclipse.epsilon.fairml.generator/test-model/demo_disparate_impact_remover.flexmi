- ?nsuri: fairml

- fairml:
  - name: Demo Disparate Impact Remover
  - :var: varFairml
  - :global: varFairml2
  - description: |-
     This notebook demonstrates the ability of the DisparateImpactRemover algorithm.
     The algorithm corrects for imbalanced selection rates between unprivileged and privileged groups at various levels of repair. 
     https://github.com/Trusted-AI/AIF360/blob/master/examples/demo_disparate_impact_remover.ipynb
  - modules: from aif360.datasets import AdultDataset

# set the dataset
  - dataset:
    - name: Adult Dataset
    - protectedAttributes: sex
    - datasetModule: AdultDataset
    - trainTestValidationSplit: 16281
    - parameters: |-
        protected_attribute_names=['sex'],
        privileged_classes=[['Male']], categorical_features=[],
        features_to_drop=['fnlwgt'],
        features_to_keep=['age'&comma; 'education-num'&comma; 'capital-gain'&comma; 'capital-loss'&comma; 'hours-per-week']

#  - dataset:
#    - name: Adult Dataset
#    - datasetPath: ../data/adult.data.numeric.csv
#    - predictedAttribute: income-per-year
#    - protectedAttributes: sex
#    - trainTestSplit: 6, 3
#    - featuresToKeep: age, education-num, capital-gain, capital-loss, hours-per-week
       
# define the bias mitigation
  - biasMitigation:
    - name: Bias Mitigation using Disparate Impact Remover  
    - dataset: Adult Dataset
  
    - trainingMethod:
      - algorithm: LogisticRegression
      - parameters: class_weight='balanced', solver='liblinear'
         
    - createRangeDisparateImpactRemover:
      - :from: 0.0
      - :to: 1.0
      - :step: 0.1
    
    - biasMetric:
      - name: disparate_impact
    
- :template:
  - name: createRangeDisparateImpactRemover
  - parameter:
    - name: from
  - parameter:
    - name: to
  - parameter:
    - name: step
  - content:
    - language: EGL
    - script: |-
       [% var f = from.asDouble(); %]    
       [% var t = to.asDouble(); %]    
       [% var s = step.asDouble(); %]    
       [% var times = ((t - f) / s).asInteger(); %]
       [% for(i in 0.to(times)) { %]
       - mitigationMethod:
         - algorithm: DisparateImpactRemover
         - parameters: repair_level=[%= (f + (i * s)).format("%.1f") %]    
       [% } %]