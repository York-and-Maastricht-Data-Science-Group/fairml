- ?nsuri: fairml
- fairml:
  - name: Demo Meta Classifier
  - description: |-
      Meta-Algorithm for fair classification
      https://github.com/Trusted-AI/AIF360/blob/master/examples/demo_meta_classifier.ipynb
  - modules: from aif360.algorithms.preprocessing.optim_preproc_helpers.data_preproc_functions import load_preproc_data_adult

# set the dataset
  - dataset:
    - name: Adult Dataset (Sex)
    - datasetModule: load_preproc_data_adult
    - protectedAttributes: sex
    - trainTestSplit: 7, 3
    
  - dataset:
    - name: Adult Dataset (Race)
    - datasetModule: load_preproc_data_adult
    - protectedAttributes: race
    - trainTestSplit: 7, 3

# # define the bias mitigation for sex
  - biasMitigation:
    - name: Bias Mitigation using MetaFair Classifier - Adult Dataset (Sex)  
    - dataset: Adult Dataset (Sex)
    
    - mitigationMethod:
      - algorithm: MetaFairClassifier
      - parameters: tau=0.0, sensitive_attr='sex', type='fdr'
    - mitigationMethod:
      - algorithm: MetaFairClassifier
      - parameters: tau=0.7, sensitive_attr='sex', type='fdr'
    
    - biasMetric:
      - name: mean_difference
    - biasMetric:
      - name: accuracy
    - biasMetric:
      - name: balanced_accuracy
    - biasMetric:
      - name: disparate_impact
    - biasMetric:
      - name: false_discovery_rate_ratio
  
  
# define the bias mitigation for race   
  - biasMitigation:
    - name: Bias Mitigation using MetaFair Classifier - Adult Dataset (Race)  
    - dataset: Adult Dataset (Race)
 
    - createRangeMetaFairClassifier:
      - :from: 0.0
      - :to: 0.9
      - :step: 0.1
      
    - biasMetric:
      - name: accuracy
    - biasMetric:
      - name: disparate_impact

- :template:
  - name: createRangeMetaFairClassifier
  - parameter:
    - name: from
  - parameter:
    - name: to
  - parameter:
    - name: step
  - content:
    - language: EGL
    - script: |-
       [% var f = from.asDouble(); %]    
       [% var t = to.asDouble(); %]    
       [% var s = step.asDouble(); %]    
       [% var times = ((t - f) / s).asInteger(); %]
       [% for(i in 0.to(times)) { %]
       - mitigationMethod:
         - algorithm: MetaFairClassifier
         - parameters: tau=[%=(f + (i * s)).format("%.1f")%], sensitive_attr='race', type='sr'    
       [% } %]